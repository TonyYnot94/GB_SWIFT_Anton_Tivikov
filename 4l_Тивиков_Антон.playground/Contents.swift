import UIKit

class Car {

    var mark : String
    var model : String
    var mileage : Double
    var isWindowsOpen : WindowsIsOpen
    var isEngineRunning : EngineIsRunning
    
    init(mark : String , model : String , mileage : Double , isWindowsOpen : WindowsIsOpen, isEngineRunning : EngineIsRunning  ){
        self.mark = mark
        self.model = model
        self.mileage = mileage
        self.isWindowsOpen = isWindowsOpen
        self.isEngineRunning = isEngineRunning
    }
    
    enum WindowsIsOpen : CustomStringConvertible {
        
        case opened , closed
        
        var description: String {
            
            switch self {
                
            case .opened :
            return "–û—Ç–∫—Ä—ã—Ç—ã"
            case .closed :
            return "–ó–∞–∫—Ä—ã—Ç—ã"
            }
        }
        
    }
    
    enum EngineIsRunning : CustomStringConvertible {
        case run, stop
        
        var description: String {
            switch self {
            case .run :
                return "–í–∫–ª—é—á–µ–Ω"
            case .stop :
                return "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            }
        }
    }
   
    func discription(){
        print("\n–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ ‚Ññ1(–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ) üöò \n–ú–∞—à–∏–Ω–∞ –º–∞—Ä–∫–∏ : \(mark)\n–ú–æ–¥–µ–ª—å : \(model)\n–ü—Ä–æ–±–µ–≥ : \(mileage)\n–û–∫–Ω–∞ : \(isWindowsOpen)\n–î–≤–∏–≥–∞—Ç–µ–ª—å : \(isEngineRunning)")
    }
    
    func startEngine(){
        if isEngineRunning == .run{
            print("\n–î–≤–∏–≥–∞—Ç–µ–ª—å —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
        }else{
            isEngineRunning = .run
            print("\n–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω")
        }
    }
    
    func stopEngine(){
        if isEngineRunning == .stop {
            print("\n–î–≤–∏–≥–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω")
        }else{
            isEngineRunning = .stop
            print("\n–î–≤–∏–≥–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω")
        }
    }
    
    func actionMethod(){
    }
}


var car1 = Car(mark: "Audi", model: "A6", mileage: 0, isWindowsOpen: .closed, isEngineRunning: .stop)


car1.discription()
car1.startEngine()
car1.discription()
car1.startEngine()

//
//
//
//
//
//

class SportCar : Car {
    enum CarType : CustomStringConvertible {
        case supercar , gipercar , supermegaturbocar
        var description: String {
            switch self {
            case .supercar : return "–°—É–ø–µ—Ä–∫–∞—Ä"
            case .gipercar : return "–ì–∏–ø–µ—Ä–∫–∞—Ä"
            case .supermegaturbocar : return "–ü–£–®–ö–ê-–ì–û–ù–ö–ê-–†–ê–ö–ï–¢–ê"
            }
        }
    }
    
    enum WheelDrive : CustomStringConvertible {
        case FWD , RWD , AWD
        
        var description: String {
            switch self {
            case .FWD :
                return "–ü–µ—Ä–µ–¥–Ω–∏–π"
            case .RWD :
                return "–ó–∞–¥–Ω–∏–π"
            case .AWD :
                return "–ü–æ–ª–Ω—ã–π"
            }
        }
    }
    
    enum Transmission : CustomStringConvertible {
        case manual, automatic
        
        var description: String {
            switch self {
            case .manual :
                return "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á"
            case .automatic :
                return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á"
            }
        }
    }
    
    var transmission : Transmission
    var wheelDrive : WheelDrive
    var type : CarType
    
    
    init(mark: String, model: String, mileage: Double, isWindowsOpen: Car.WindowsIsOpen, isEngineRunning: Car.EngineIsRunning , transmission : Transmission, wheelDrive : WheelDrive, type : CarType) {
        self.transmission = transmission
        self.wheelDrive = wheelDrive
        self.type = type
        super .init(mark: mark, model: model, mileage: mileage, isWindowsOpen: isWindowsOpen, isEngineRunning: isEngineRunning)
    }
    
    override func discription() {
        print("\n–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ ‚Ññ2(–°–ø–æ—Ä—Ç–ö–∞—Ä) üèé \n–ú–∞—à–∏–Ω–∞ –º–∞—Ä–∫–∏ : \(mark)\n–ú–æ–¥–µ–ª—å : \(model)\n–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è : \(type)\n–ü—Ä–æ–±–µ–≥ : \(mileage)\n–û–∫–Ω–∞ : \(isWindowsOpen)\n–î–≤–∏–≥–∞—Ç–µ–ª—å : \(isEngineRunning)\n–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á : \(transmission)\n–ü—Ä–∏–≤–æ–¥ : \(wheelDrive)")
        
       
    }
   
}


var sportcar = SportCar(mark: "Porsche", model: "911", mileage: 1200.2, isWindowsOpen: .closed, isEngineRunning: .run, transmission: .manual, wheelDrive: .RWD, type: .supermegaturbocar)

var sportcar2 = SportCar(mark: "Bugatti", model: "Chiron", mileage: 0.0, isWindowsOpen: .closed, isEngineRunning: .stop, transmission: .automatic, wheelDrive: .AWD , type: .gipercar)

sportcar.discription()
sportcar.startEngine()
sportcar2.discription()
sportcar2.startEngine()


//
//
//
//
//
//

class TrunkCar : Car{
    
    enum CarType : CustomStringConvertible {
        case semi_trailer , trailer , flatbet
        
        var description: String {
            switch self {
            case .semi_trailer : return "–°–µ–¥–µ–ª—å–Ω—ã–π —Ç—è–≥–∞—á"
            case .trailer : return "–ë–æ—Ä—Ç–æ–≤–æ–π —Å –ø—Ä–∏—Ü–µ–ø–æ–º"
            case .flatbet : return "–ë–æ—Ä—Ç–æ–≤–æ–π"
            }
        }
    }
    
    
    enum WheelDrive : CustomStringConvertible {
        case FWD , RWD , AWD
        
        var description: String {
            switch self {
            case .FWD :
                return "–ü–µ—Ä–µ–¥–Ω–∏–π"
            case .RWD :
                return "–ó–∞–¥–Ω–∏–π"
            case .AWD :
                return "–ü–æ–ª–Ω—ã–π"
            }
        }
    }
    
    
    enum Transmission : CustomStringConvertible {
        case manual, automatic
        
        var description: String {
            switch self {
            case .manual :
                return "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á"
            case .automatic :
                return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á"
            }
        }
    }
    
    
    enum Pricep : CustomStringConvertible {
       
        case yes , no
        
        var description: String {
            switch self {
        case .yes : return "–ï—Å—Ç—å –ø—Ä–∏—Ü–µ–ø"
        case .no : return "–ù–µ—Ç –ø—Ä–∏—Ü–µ–ø–∞"
            }
        }
    }
    
    
    var transmission : Transmission
    var wheelDrive : WheelDrive
    var type : CarType
    var pricep : Pricep
    
    override func actionMethod() {
        if pricep == .yes {
            print("–£ —ç—Ç–æ–≥–æ –≥—Ä—É–∑–æ–≤–∏–∫–∞ –º–æ–∂–Ω–æ –æ—Ç—Ü–µ–ø–∏—Ç—å –ø—Ä–∏—Ü–µ–ø")
        }else {
            print("–£ —ç—Ç–æ–≥–æ –≥—Ä—É–∑–æ–≤–∏–∫–∞ - –Ω–µ—Ç –ø—Ä–∏—Ü–µ–ø–∞")
        }
    }
    
    init(mark: String, model: String, mileage: Double, isWindowsOpen: Car.WindowsIsOpen, isEngineRunning: Car.EngineIsRunning, transmission : Transmission, wheelDrive : WheelDrive, type : CarType , pricep : Pricep) {
        self.pricep = pricep
        self.transmission = transmission
        self.wheelDrive = wheelDrive
        self.type = type
        super .init(mark: mark, model: model, mileage: mileage, isWindowsOpen: isWindowsOpen, isEngineRunning: isEngineRunning)
    }
    
    override func discription() {
        print("\n–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ ‚Ññ3(–ì—Ä—É–∑–æ–≤–∏–∫) üöö \n–ú–∞—à–∏–Ω–∞ –º–∞—Ä–∫–∏ : \(mark)\n–ú–æ–¥–µ–ª—å : \(model)\n–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è : \(type)\n–ü—Ä–æ–±–µ–≥ : \(mileage)\n–û–∫–Ω–∞ : \(isWindowsOpen)\n–î–≤–∏–≥–∞—Ç–µ–ª—å : \(isEngineRunning)\n–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á : \(transmission)\n–ü—Ä–∏–≤–æ–¥ : \(wheelDrive)\n–ü—Ä–∏—Ü–µ–ø : \(pricep)")
    }
}


var truck = TrunkCar(mark: "Man", model: "GTX", mileage: 234345.34, isWindowsOpen: .closed, isEngineRunning: .stop, transmission: .automatic, wheelDrive: .AWD, type: .semi_trailer, pricep: .yes)
var truck2 = TrunkCar(mark: "KAMAZ", model: "124456321009", mileage: 100500.15, isWindowsOpen: .closed, isEngineRunning: .stop, transmission: .automatic, wheelDrive: .RWD, type: .flatbet, pricep: .no)

truck.discription()
truck2.discription()
truck2.actionMethod()
truck.actionMethod()
truck.startEngine()

